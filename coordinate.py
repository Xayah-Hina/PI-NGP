import numpy as np


def create_camera_pose(position, target):
    """
    创建一个 [4×4] 的 camera-to-world pose 矩阵。
    position: 相机位置 (3,)
    target: 相机朝向目标点 (3,)
    up: 世界的上方向 (3,)
    """
    position = np.array(position, dtype=np.float32)
    target = np.array(target, dtype=np.float32)
    up = np.array([0, 1, 0], dtype=np.float32)

    # 前方向（Z轴，朝外/朝前）→ 归一化(target - position)
    forward = target - position
    forward = forward / np.linalg.norm(forward)

    # 右方向（X轴）= forward × up
    right = np.cross(forward, up)
    right = right / np.linalg.norm(right)

    # 重新计算正交的 up 向量（Y轴）
    true_up = np.cross(right, forward)
    true_up = true_up / np.linalg.norm(true_up)

    # 构建 3x4 pose 矩阵（列方向是右、上、前）
    pose = np.eye(4, dtype=np.float32)
    pose[0, :3] = right
    pose[1, :3] = true_up
    pose[2, :3] = -forward  # 注意这里要取 -Z（NeRF / NGP 风格）
    pose[:3, 3] = position
    return pose


# ref: https://github.com/NVlabs/instant-ngp/blob/b76004c8cf478880227401ae763be4c02f80b62f/include/neural-graphics-primitives/nerf_loader.h#L50
def nerf_matrix_to_ngp(pose, scale: float = 1.0, offset: list = [0, 0, 0]):
    # for the fox dataset, 0.33 scales camera radius to ~ 2
    new_pose = np.array([
        [pose[1, 0], -pose[1, 1], -pose[1, 2], pose[1, 3] * scale + offset[0]],
        [pose[2, 0], -pose[2, 1], -pose[2, 2], pose[2, 3] * scale + offset[1]],
        [pose[0, 0], -pose[0, 1], -pose[0, 2], pose[0, 3] * scale + offset[2]],
        [0, 0, 0, 1],
    ], dtype=np.float32)
    return new_pose


def visualize_poses(poses, size=0.1):
    import trimesh
    import numpy as np
    # poses: [B, 4, 4]

    axes = trimesh.creation.axis(axis_length=4)
    box = trimesh.primitives.Box(extents=(2, 2, 2)).as_outline()
    box.colors = np.array([[128, 128, 128]] * len(box.entities))
    objects = [axes, box]

    for pose in poses:
        # a camera is visualized with 8 line segments.
        pos = pose[:3, 3]
        a = pos + size * pose[:3, 0] + size * pose[:3, 1] + size * pose[:3, 2]
        b = pos - size * pose[:3, 0] + size * pose[:3, 1] + size * pose[:3, 2]
        c = pos - size * pose[:3, 0] - size * pose[:3, 1] + size * pose[:3, 2]
        d = pos + size * pose[:3, 0] - size * pose[:3, 1] + size * pose[:3, 2]

        dir = (a + b + c + d) / 4 - pos
        dir = dir / (np.linalg.norm(dir) + 1e-8)
        o = pos + dir * 3

        segs = np.array([[pos, a], [pos, b], [pos, c], [pos, d], [a, b], [b, c], [c, d], [d, a], [pos, o]])
        segs = trimesh.load_path(segs)
        objects.append(segs)

    trimesh.Scene(objects).show()


def exp_01():
    poses = np.array(
        [
            [
                [
                    0.48627835512161255,
                    -0.24310240149497986,
                    -0.8393059968948364,
                    -0.7697111964225769
                ],
                [
                    -0.01889985240995884,
                    0.9573688507080078,
                    -0.2882491946220398,
                    0.013170702382922173
                ],
                [
                    0.8735995292663574,
                    0.15603208541870117,
                    0.4609531760215759,
                    0.3249526023864746
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    1.0
                ]
            ], [
            [
                0.8157652020454407,
                -0.1372431218624115,
                -0.5618642568588257,
                -0.39192497730255127
            ],
            [
                -0.04113851860165596,
                0.9552109837532043,
                -0.2930521070957184,
                0.010452679358422756
            ],
            [
                0.5769183039665222,
                0.262175977230072,
                0.7735819220542908,
                0.8086869120597839
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ], [
            [
                0.8836436867713928,
                0.15215487778186798,
                0.44274458289146423,
                0.8974969983100891
            ],
            [
                -0.021659603342413902,
                0.9579861760139465,
                -0.28599533438682556,
                0.02680988796055317
            ],
            [
                -0.46765878796577454,
                0.24312829971313477,
                0.8498140573501587,
                0.8316138386726379
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ], [
            [
                0.6336104273796082,
                0.20118704438209534,
                0.7470352053642273,
                1.2956339120864868
            ],
            [
                0.014488859102129936,
                0.9623404741287231,
                -0.27146074175834656,
                0.02436656318604946
            ],
            [
                -0.7735165357589722,
                0.1828240603208542,
                0.6068339943885803,
                0.497546911239624
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ], [
            [
                0.999511182308197,
                -0.0030406631994992495,
                -0.03111351653933525,
                0.2844361364841461
            ],
            [
                -0.005995774641633034,
                0.9581364989280701,
                -0.2862490713596344,
                0.011681094765663147
            ],
            [
                0.03068138100206852,
                0.28629571199417114,
                0.9576499462127686,
                0.9857829809188843
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ],
        ]
    )
    new_poses = []
    for pose in poses:
        new_pose = nerf_matrix_to_ngp(pose)
        new_poses.append(new_pose)
    new_poses = np.array(new_poses)
    visualize_poses(new_poses)

def exp_02():
    poses = np.array(
        [
            [
                [
                    0.48627835512161255,
                    -0.24310240149497986,
                    -0.8393059968948364,
                    -0.7697111964225769
                ],
                [
                    -0.01889985240995884,
                    0.9573688507080078,
                    -0.2882491946220398,
                    0.013170702382922173
                ],
                [
                    0.8735995292663574,
                    0.15603208541870117,
                    0.4609531760215759,
                    0.3249526023864746
                ],
                [
                    0.0,
                    0.0,
                    0.0,
                    1.0
                ]
            ], [
            [
                0.8157652020454407,
                -0.1372431218624115,
                -0.5618642568588257,
                -0.39192497730255127
            ],
            [
                -0.04113851860165596,
                0.9552109837532043,
                -0.2930521070957184,
                0.010452679358422756
            ],
            [
                0.5769183039665222,
                0.262175977230072,
                0.7735819220542908,
                0.8086869120597839
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ], [
            [
                0.8836436867713928,
                0.15215487778186798,
                0.44274458289146423,
                0.8974969983100891
            ],
            [
                -0.021659603342413902,
                0.9579861760139465,
                -0.28599533438682556,
                0.02680988796055317
            ],
            [
                -0.46765878796577454,
                0.24312829971313477,
                0.8498140573501587,
                0.8316138386726379
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ], [
            [
                0.6336104273796082,
                0.20118704438209534,
                0.7470352053642273,
                1.2956339120864868
            ],
            [
                0.014488859102129936,
                0.9623404741287231,
                -0.27146074175834656,
                0.02436656318604946
            ],
            [
                -0.7735165357589722,
                0.1828240603208542,
                0.6068339943885803,
                0.497546911239624
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ], [
            [
                0.999511182308197,
                -0.0030406631994992495,
                -0.03111351653933525,
                0.2844361364841461
            ],
            [
                -0.005995774641633034,
                0.9581364989280701,
                -0.2862490713596344,
                0.011681094765663147
            ],
            [
                0.03068138100206852,
                0.28629571199417114,
                0.9576499462127686,
                0.9857829809188843
            ],
            [
                0.0,
                0.0,
                0.0,
                1.0
            ]
        ],
        ]
    )
    poses[:, :3, 0] = -poses[:, :3, 0]
    poses[:, :3, 2] = -poses[:, :3, 2]
    visualize_poses(poses)


def exp_03():
    poses = np.array(
        [create_camera_pose(position=[2, 0, 0], target=[0, 0, 0], )],
    )
    visualize_poses(poses)


if __name__ == '__main__':
    exp_02()
